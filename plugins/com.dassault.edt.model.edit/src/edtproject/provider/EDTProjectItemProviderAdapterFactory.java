/**
 * Copyright (c) 2023 Dassault Aviation
 *
 * SPDX-License-Identifier: MIT
 */
package edtproject.provider;

import edtproject.util.EDTProjectAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class EDTProjectItemProviderAdapterFactory extends EDTProjectAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EDTProjectItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link edtproject.Steps} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StepsItemProvider stepsItemProvider;

	/**
	 * This creates an adapter for a {@link edtproject.Steps}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStepsAdapter() {
		if (stepsItemProvider == null) {
			stepsItemProvider = new StepsItemProvider(this);
		}

		return stepsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edtproject.Step0} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Step0ItemProvider step0ItemProvider;

	/**
	 * This creates an adapter for a {@link edtproject.Step0}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStep0Adapter() {
		if (step0ItemProvider == null) {
			step0ItemProvider = new Step0ItemProvider(this);
		}

		return step0ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edtproject.Step1} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Step1ItemProvider step1ItemProvider;

	/**
	 * This creates an adapter for a {@link edtproject.Step1}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStep1Adapter() {
		if (step1ItemProvider == null) {
			step1ItemProvider = new Step1ItemProvider(this);
		}

		return step1ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edtproject.Step2} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Step2ItemProvider step2ItemProvider;

	/**
	 * This creates an adapter for a {@link edtproject.Step2}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStep2Adapter() {
		if (step2ItemProvider == null) {
			step2ItemProvider = new Step2ItemProvider(this);
		}

		return step2ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edtproject.Step3} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Step3ItemProvider step3ItemProvider;

	/**
	 * This creates an adapter for a {@link edtproject.Step3}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStep3Adapter() {
		if (step3ItemProvider == null) {
			step3ItemProvider = new Step3ItemProvider(this);
		}

		return step3ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edtproject.Step4} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Step4ItemProvider step4ItemProvider;

	/**
	 * This creates an adapter for a {@link edtproject.Step4}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStep4Adapter() {
		if (step4ItemProvider == null) {
			step4ItemProvider = new Step4ItemProvider(this);
		}

		return step4ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edtproject.Step5} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Step5ItemProvider step5ItemProvider;

	/**
	 * This creates an adapter for a {@link edtproject.Step5}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStep5Adapter() {
		if (step5ItemProvider == null) {
			step5ItemProvider = new Step5ItemProvider(this);
		}

		return step5ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edtproject.Composite} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompositeItemProvider compositeItemProvider;

	/**
	 * This creates an adapter for a {@link edtproject.Composite}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompositeAdapter() {
		if (compositeItemProvider == null) {
			compositeItemProvider = new CompositeItemProvider(this);
		}

		return compositeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edtproject.ComponentDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentDefinitionItemProvider componentDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link edtproject.ComponentDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentDefinitionAdapter() {
		if (componentDefinitionItemProvider == null) {
			componentDefinitionItemProvider = new ComponentDefinitionItemProvider(this);
		}

		return componentDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edtproject.Component} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentItemProvider componentItemProvider;

	/**
	 * This creates an adapter for a {@link edtproject.Component}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentAdapter() {
		if (componentItemProvider == null) {
			componentItemProvider = new ComponentItemProvider(this);
		}

		return componentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edtproject.ComponentDefinitionReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentDefinitionReferenceItemProvider componentDefinitionReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link edtproject.ComponentDefinitionReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentDefinitionReferenceAdapter() {
		if (componentDefinitionReferenceItemProvider == null) {
			componentDefinitionReferenceItemProvider = new ComponentDefinitionReferenceItemProvider(this);
		}

		return componentDefinitionReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edtproject.ComponentDefinitionService} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentDefinitionServiceItemProvider componentDefinitionServiceItemProvider;

	/**
	 * This creates an adapter for a {@link edtproject.ComponentDefinitionService}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentDefinitionServiceAdapter() {
		if (componentDefinitionServiceItemProvider == null) {
			componentDefinitionServiceItemProvider = new ComponentDefinitionServiceItemProvider(this);
		}

		return componentDefinitionServiceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edtproject.Property} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyItemProvider propertyItemProvider;

	/**
	 * This creates an adapter for a {@link edtproject.Property}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyAdapter() {
		if (propertyItemProvider == null) {
			propertyItemProvider = new PropertyItemProvider(this);
		}

		return propertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edtproject.ComponentProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentPropertyItemProvider componentPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link edtproject.ComponentProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentPropertyAdapter() {
		if (componentPropertyItemProvider == null) {
			componentPropertyItemProvider = new ComponentPropertyItemProvider(this);
		}

		return componentPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edtproject.ComponentReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentReferenceItemProvider componentReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link edtproject.ComponentReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentReferenceAdapter() {
		if (componentReferenceItemProvider == null) {
			componentReferenceItemProvider = new ComponentReferenceItemProvider(this);
		}

		return componentReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edtproject.ComponentService} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentServiceItemProvider componentServiceItemProvider;

	/**
	 * This creates an adapter for a {@link edtproject.ComponentService}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentServiceAdapter() {
		if (componentServiceItemProvider == null) {
			componentServiceItemProvider = new ComponentServiceItemProvider(this);
		}

		return componentServiceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edtproject.CompositeReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompositeReferenceItemProvider compositeReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link edtproject.CompositeReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompositeReferenceAdapter() {
		if (compositeReferenceItemProvider == null) {
			compositeReferenceItemProvider = new CompositeReferenceItemProvider(this);
		}

		return compositeReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edtproject.CompositeService} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompositeServiceItemProvider compositeServiceItemProvider;

	/**
	 * This creates an adapter for a {@link edtproject.CompositeService}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompositeServiceAdapter() {
		if (compositeServiceItemProvider == null) {
			compositeServiceItemProvider = new CompositeServiceItemProvider(this);
		}

		return compositeServiceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edtproject.Contract} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContractItemProvider contractItemProvider;

	/**
	 * This creates an adapter for a {@link edtproject.Contract}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContractAdapter() {
		if (contractItemProvider == null) {
			contractItemProvider = new ContractItemProvider(this);
		}

		return contractItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edtproject.FinalAssembly} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FinalAssemblyItemProvider finalAssemblyItemProvider;

	/**
	 * This creates an adapter for a {@link edtproject.FinalAssembly}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFinalAssemblyAdapter() {
		if (finalAssemblyItemProvider == null) {
			finalAssemblyItemProvider = new FinalAssemblyItemProvider(this);
		}

		return finalAssemblyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edtproject.OutputDirectory} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutputDirectoryItemProvider outputDirectoryItemProvider;

	/**
	 * This creates an adapter for a {@link edtproject.OutputDirectory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutputDirectoryAdapter() {
		if (outputDirectoryItemProvider == null) {
			outputDirectoryItemProvider = new OutputDirectoryItemProvider(this);
		}

		return outputDirectoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edtproject.ServiceLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceLinkItemProvider serviceLinkItemProvider;

	/**
	 * This creates an adapter for a {@link edtproject.ServiceLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceLinkAdapter() {
		if (serviceLinkItemProvider == null) {
			serviceLinkItemProvider = new ServiceLinkItemProvider(this);
		}

		return serviceLinkItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (stepsItemProvider != null) stepsItemProvider.dispose();
		if (step0ItemProvider != null) step0ItemProvider.dispose();
		if (step1ItemProvider != null) step1ItemProvider.dispose();
		if (step2ItemProvider != null) step2ItemProvider.dispose();
		if (step3ItemProvider != null) step3ItemProvider.dispose();
		if (step4ItemProvider != null) step4ItemProvider.dispose();
		if (step5ItemProvider != null) step5ItemProvider.dispose();
		if (compositeItemProvider != null) compositeItemProvider.dispose();
		if (componentDefinitionItemProvider != null) componentDefinitionItemProvider.dispose();
		if (componentItemProvider != null) componentItemProvider.dispose();
		if (componentDefinitionReferenceItemProvider != null) componentDefinitionReferenceItemProvider.dispose();
		if (componentDefinitionServiceItemProvider != null) componentDefinitionServiceItemProvider.dispose();
		if (propertyItemProvider != null) propertyItemProvider.dispose();
		if (componentPropertyItemProvider != null) componentPropertyItemProvider.dispose();
		if (componentReferenceItemProvider != null) componentReferenceItemProvider.dispose();
		if (componentServiceItemProvider != null) componentServiceItemProvider.dispose();
		if (compositeReferenceItemProvider != null) compositeReferenceItemProvider.dispose();
		if (compositeServiceItemProvider != null) compositeServiceItemProvider.dispose();
		if (contractItemProvider != null) contractItemProvider.dispose();
		if (finalAssemblyItemProvider != null) finalAssemblyItemProvider.dispose();
		if (outputDirectoryItemProvider != null) outputDirectoryItemProvider.dispose();
		if (serviceLinkItemProvider != null) serviceLinkItemProvider.dispose();
	}

}
