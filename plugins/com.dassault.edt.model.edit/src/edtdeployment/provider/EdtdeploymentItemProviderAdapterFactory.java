/**
 * Copyright (c) 2023 Dassault Aviation
 *
 * SPDX-License-Identifier: MIT
 */
package edtdeployment.provider;

import edtdeployment.util.EdtdeploymentAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class EdtdeploymentItemProviderAdapterFactory extends EdtdeploymentAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EdtdeploymentItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link edtdeployment.Deployment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeploymentItemProvider deploymentItemProvider;

	/**
	 * This creates an adapter for a {@link edtdeployment.Deployment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeploymentAdapter() {
		if (deploymentItemProvider == null) {
			deploymentItemProvider = new DeploymentItemProvider(this);
		}

		return deploymentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edtdeployment.ProtectionDomain} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProtectionDomainItemProvider protectionDomainItemProvider;

	/**
	 * This creates an adapter for a {@link edtdeployment.ProtectionDomain}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProtectionDomainAdapter() {
		if (protectionDomainItemProvider == null) {
			protectionDomainItemProvider = new ProtectionDomainItemProvider(this);
		}

		return protectionDomainItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edtdeployment.DeployedModuleInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeployedModuleInstanceItemProvider deployedModuleInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link edtdeployment.DeployedModuleInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeployedModuleInstanceAdapter() {
		if (deployedModuleInstanceItemProvider == null) {
			deployedModuleInstanceItemProvider = new DeployedModuleInstanceItemProvider(this);
		}

		return deployedModuleInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edtdeployment.DeployedTriggerInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeployedTriggerInstanceItemProvider deployedTriggerInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link edtdeployment.DeployedTriggerInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeployedTriggerInstanceAdapter() {
		if (deployedTriggerInstanceItemProvider == null) {
			deployedTriggerInstanceItemProvider = new DeployedTriggerInstanceItemProvider(this);
		}

		return deployedTriggerInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edtdeployment.LogPolicy} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogPolicyItemProvider logPolicyItemProvider;

	/**
	 * This creates an adapter for a {@link edtdeployment.LogPolicy}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogPolicyAdapter() {
		if (logPolicyItemProvider == null) {
			logPolicyItemProvider = new LogPolicyItemProvider(this);
		}

		return logPolicyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edtdeployment.ComponentLog} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentLogItemProvider componentLogItemProvider;

	/**
	 * This creates an adapter for a {@link edtdeployment.ComponentLog}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentLogAdapter() {
		if (componentLogItemProvider == null) {
			componentLogItemProvider = new ComponentLogItemProvider(this);
		}

		return componentLogItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edtdeployment.ModuleLog} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModuleLogItemProvider moduleLogItemProvider;

	/**
	 * This creates an adapter for a {@link edtdeployment.ModuleLog}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModuleLogAdapter() {
		if (moduleLogItemProvider == null) {
			moduleLogItemProvider = new ModuleLogItemProvider(this);
		}

		return moduleLogItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edtdeployment.PlatformConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlatformConfigurationItemProvider platformConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link edtdeployment.PlatformConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlatformConfigurationAdapter() {
		if (platformConfigurationItemProvider == null) {
			platformConfigurationItemProvider = new PlatformConfigurationItemProvider(this);
		}

		return platformConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edtdeployment.PlatformMessage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlatformMessageItemProvider platformMessageItemProvider;

	/**
	 * This creates an adapter for a {@link edtdeployment.PlatformMessage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlatformMessageAdapter() {
		if (platformMessageItemProvider == null) {
			platformMessageItemProvider = new PlatformMessageItemProvider(this);
		}

		return platformMessageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edtdeployment.ComputingNodeConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComputingNodeConfigurationItemProvider computingNodeConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link edtdeployment.ComputingNodeConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComputingNodeConfigurationAdapter() {
		if (computingNodeConfigurationItemProvider == null) {
			computingNodeConfigurationItemProvider = new ComputingNodeConfigurationItemProvider(this);
		}

		return computingNodeConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edtdeployment.WireMapping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WireMappingItemProvider wireMappingItemProvider;

	/**
	 * This creates an adapter for a {@link edtdeployment.WireMapping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWireMappingAdapter() {
		if (wireMappingItemProvider == null) {
			wireMappingItemProvider = new WireMappingItemProvider(this);
		}

		return wireMappingItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

}
