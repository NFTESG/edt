/**
 * Copyright (c) 2023 Dassault Aviation
 *
 * SPDX-License-Identifier: MIT
 *
 */

package org.open.oasis.docs.ns.opencsa.sca.sca.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.open.oasis.docs.ns.opencsa.sca.sca.util.scaAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class scaItemProviderAdapterFactory extends scaAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public scaItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.open.oasis.docs.ns.opencsa.sca.sca.CommonExtensionBase} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CommonExtensionBaseItemProvider commonExtensionBaseItemProvider;

	/**
	 * This creates an adapter for a {@link org.open.oasis.docs.ns.opencsa.sca.sca.CommonExtensionBase}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCommonExtensionBaseAdapter() {
		if (commonExtensionBaseItemProvider == null) {
			commonExtensionBaseItemProvider = new CommonExtensionBaseItemProvider(this);
		}

		return commonExtensionBaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.open.oasis.docs.ns.opencsa.sca.sca.Component} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentItemProvider componentItemProvider;

	/**
	 * This creates an adapter for a {@link org.open.oasis.docs.ns.opencsa.sca.sca.Component}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentAdapter() {
		if (componentItemProvider == null) {
			componentItemProvider = new ComponentItemProvider(this);
		}

		return componentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.open.oasis.docs.ns.opencsa.sca.sca.ComponentReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentReferenceItemProvider componentReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.open.oasis.docs.ns.opencsa.sca.sca.ComponentReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentReferenceAdapter() {
		if (componentReferenceItemProvider == null) {
			componentReferenceItemProvider = new ComponentReferenceItemProvider(this);
		}

		return componentReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.open.oasis.docs.ns.opencsa.sca.sca.ComponentService} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentServiceItemProvider componentServiceItemProvider;

	/**
	 * This creates an adapter for a {@link org.open.oasis.docs.ns.opencsa.sca.sca.ComponentService}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentServiceAdapter() {
		if (componentServiceItemProvider == null) {
			componentServiceItemProvider = new ComponentServiceItemProvider(this);
		}

		return componentServiceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.open.oasis.docs.ns.opencsa.sca.sca.ComponentType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentTypeItemProvider componentTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.open.oasis.docs.ns.opencsa.sca.sca.ComponentType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentTypeAdapter() {
		if (componentTypeItemProvider == null) {
			componentTypeItemProvider = new ComponentTypeItemProvider(this);
		}

		return componentTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.open.oasis.docs.ns.opencsa.sca.sca.ComponentTypeReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentTypeReferenceItemProvider componentTypeReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.open.oasis.docs.ns.opencsa.sca.sca.ComponentTypeReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentTypeReferenceAdapter() {
		if (componentTypeReferenceItemProvider == null) {
			componentTypeReferenceItemProvider = new ComponentTypeReferenceItemProvider(this);
		}

		return componentTypeReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.open.oasis.docs.ns.opencsa.sca.sca.Composite} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompositeItemProvider compositeItemProvider;

	/**
	 * This creates an adapter for a {@link org.open.oasis.docs.ns.opencsa.sca.sca.Composite}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompositeAdapter() {
		if (compositeItemProvider == null) {
			compositeItemProvider = new CompositeItemProvider(this);
		}

		return compositeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.open.oasis.docs.ns.opencsa.sca.sca.ContributionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContributionTypeItemProvider contributionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.open.oasis.docs.ns.opencsa.sca.sca.ContributionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContributionTypeAdapter() {
		if (contributionTypeItemProvider == null) {
			contributionTypeItemProvider = new ContributionTypeItemProvider(this);
		}

		return contributionTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.open.oasis.docs.ns.opencsa.sca.sca.DeployableType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeployableTypeItemProvider deployableTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.open.oasis.docs.ns.opencsa.sca.sca.DeployableType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeployableTypeAdapter() {
		if (deployableTypeItemProvider == null) {
			deployableTypeItemProvider = new DeployableTypeItemProvider(this);
		}

		return deployableTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.open.oasis.docs.ns.opencsa.sca.sca.Documentation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DocumentationItemProvider documentationItemProvider;

	/**
	 * This creates an adapter for a {@link org.open.oasis.docs.ns.opencsa.sca.sca.Documentation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDocumentationAdapter() {
		if (documentationItemProvider == null) {
			documentationItemProvider = new DocumentationItemProvider(this);
		}

		return documentationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.open.oasis.docs.ns.opencsa.sca.sca.DocumentRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DocumentRootItemProvider documentRootItemProvider;

	/**
	 * This creates an adapter for a {@link org.open.oasis.docs.ns.opencsa.sca.sca.DocumentRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDocumentRootAdapter() {
		if (documentRootItemProvider == null) {
			documentRootItemProvider = new DocumentRootItemProvider(this);
		}

		return documentRootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.open.oasis.docs.ns.opencsa.sca.sca.ExtensionsType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExtensionsTypeItemProvider extensionsTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.open.oasis.docs.ns.opencsa.sca.sca.ExtensionsType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExtensionsTypeAdapter() {
		if (extensionsTypeItemProvider == null) {
			extensionsTypeItemProvider = new ExtensionsTypeItemProvider(this);
		}

		return extensionsTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.open.oasis.docs.ns.opencsa.sca.sca.ImplementationType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImplementationTypeItemProvider implementationTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.open.oasis.docs.ns.opencsa.sca.sca.ImplementationType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImplementationTypeAdapter() {
		if (implementationTypeItemProvider == null) {
			implementationTypeItemProvider = new ImplementationTypeItemProvider(this);
		}

		return implementationTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.open.oasis.docs.ns.opencsa.sca.sca.Property} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyItemProvider propertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.open.oasis.docs.ns.opencsa.sca.sca.Property}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyAdapter() {
		if (propertyItemProvider == null) {
			propertyItemProvider = new PropertyItemProvider(this);
		}

		return propertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.open.oasis.docs.ns.opencsa.sca.sca.PropertyValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyValueItemProvider propertyValueItemProvider;

	/**
	 * This creates an adapter for a {@link org.open.oasis.docs.ns.opencsa.sca.sca.PropertyValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyValueAdapter() {
		if (propertyValueItemProvider == null) {
			propertyValueItemProvider = new PropertyValueItemProvider(this);
		}

		return propertyValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.open.oasis.docs.ns.opencsa.sca.sca.Reference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReferenceItemProvider referenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.open.oasis.docs.ns.opencsa.sca.sca.Reference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReferenceAdapter() {
		if (referenceItemProvider == null) {
			referenceItemProvider = new ReferenceItemProvider(this);
		}

		return referenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.open.oasis.docs.ns.opencsa.sca.sca.SCAImplementation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SCAImplementationItemProvider scaImplementationItemProvider;

	/**
	 * This creates an adapter for a {@link org.open.oasis.docs.ns.opencsa.sca.sca.SCAImplementation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSCAImplementationAdapter() {
		if (scaImplementationItemProvider == null) {
			scaImplementationItemProvider = new SCAImplementationItemProvider(this);
		}

		return scaImplementationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.open.oasis.docs.ns.opencsa.sca.sca.SCAPropertyBase} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SCAPropertyBaseItemProvider scaPropertyBaseItemProvider;

	/**
	 * This creates an adapter for a {@link org.open.oasis.docs.ns.opencsa.sca.sca.SCAPropertyBase}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSCAPropertyBaseAdapter() {
		if (scaPropertyBaseItemProvider == null) {
			scaPropertyBaseItemProvider = new SCAPropertyBaseItemProvider(this);
		}

		return scaPropertyBaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.open.oasis.docs.ns.opencsa.sca.sca.Service} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceItemProvider serviceItemProvider;

	/**
	 * This creates an adapter for a {@link org.open.oasis.docs.ns.opencsa.sca.sca.Service}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceAdapter() {
		if (serviceItemProvider == null) {
			serviceItemProvider = new ServiceItemProvider(this);
		}

		return serviceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.open.oasis.docs.ns.opencsa.sca.sca.ServiceType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceTypeItemProvider serviceTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.open.oasis.docs.ns.opencsa.sca.sca.ServiceType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceTypeAdapter() {
		if (serviceTypeItemProvider == null) {
			serviceTypeItemProvider = new ServiceTypeItemProvider(this);
		}

		return serviceTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.open.oasis.docs.ns.opencsa.sca.sca.ValueType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValueTypeItemProvider valueTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.open.oasis.docs.ns.opencsa.sca.sca.ValueType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValueTypeAdapter() {
		if (valueTypeItemProvider == null) {
			valueTypeItemProvider = new ValueTypeItemProvider(this);
		}

		return valueTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.open.oasis.docs.ns.opencsa.sca.sca.Wire} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WireItemProvider wireItemProvider;

	/**
	 * This creates an adapter for a {@link org.open.oasis.docs.ns.opencsa.sca.sca.Wire}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWireAdapter() {
		if (wireItemProvider == null) {
			wireItemProvider = new WireItemProvider(this);
		}

		return wireItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (commonExtensionBaseItemProvider != null) commonExtensionBaseItemProvider.dispose();
		if (componentItemProvider != null) componentItemProvider.dispose();
		if (componentReferenceItemProvider != null) componentReferenceItemProvider.dispose();
		if (componentServiceItemProvider != null) componentServiceItemProvider.dispose();
		if (componentTypeItemProvider != null) componentTypeItemProvider.dispose();
		if (componentTypeReferenceItemProvider != null) componentTypeReferenceItemProvider.dispose();
		if (compositeItemProvider != null) compositeItemProvider.dispose();
		if (contributionTypeItemProvider != null) contributionTypeItemProvider.dispose();
		if (deployableTypeItemProvider != null) deployableTypeItemProvider.dispose();
		if (documentationItemProvider != null) documentationItemProvider.dispose();
		if (documentRootItemProvider != null) documentRootItemProvider.dispose();
		if (extensionsTypeItemProvider != null) extensionsTypeItemProvider.dispose();
		if (implementationTypeItemProvider != null) implementationTypeItemProvider.dispose();
		if (propertyItemProvider != null) propertyItemProvider.dispose();
		if (propertyValueItemProvider != null) propertyValueItemProvider.dispose();
		if (referenceItemProvider != null) referenceItemProvider.dispose();
		if (scaImplementationItemProvider != null) scaImplementationItemProvider.dispose();
		if (scaPropertyBaseItemProvider != null) scaPropertyBaseItemProvider.dispose();
		if (serviceItemProvider != null) serviceItemProvider.dispose();
		if (serviceTypeItemProvider != null) serviceTypeItemProvider.dispose();
		if (valueTypeItemProvider != null) valueTypeItemProvider.dispose();
		if (wireItemProvider != null) wireItemProvider.dispose();
	}

}
