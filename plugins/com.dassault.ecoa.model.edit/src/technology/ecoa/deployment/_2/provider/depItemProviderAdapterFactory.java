/**
 * Copyright (c) 2023 Dassault Aviation
 *
 * SPDX-License-Identifier: MIT
 *
 */

package technology.ecoa.deployment._2.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import technology.ecoa.deployment._2.util.depAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class depItemProviderAdapterFactory extends depAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public depItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link technology.ecoa.deployment._2.ComponentLog} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentLogItemProvider componentLogItemProvider;

	/**
	 * This creates an adapter for a {@link technology.ecoa.deployment._2.ComponentLog}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentLogAdapter() {
		if (componentLogItemProvider == null) {
			componentLogItemProvider = new ComponentLogItemProvider(this);
		}

		return componentLogItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link technology.ecoa.deployment._2.ComputingNodeConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComputingNodeConfigurationItemProvider computingNodeConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link technology.ecoa.deployment._2.ComputingNodeConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComputingNodeConfigurationAdapter() {
		if (computingNodeConfigurationItemProvider == null) {
			computingNodeConfigurationItemProvider = new ComputingNodeConfigurationItemProvider(this);
		}

		return computingNodeConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link technology.ecoa.deployment._2.DeployedModuleInstanceType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeployedModuleInstanceTypeItemProvider deployedModuleInstanceTypeItemProvider;

	/**
	 * This creates an adapter for a {@link technology.ecoa.deployment._2.DeployedModuleInstanceType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeployedModuleInstanceTypeAdapter() {
		if (deployedModuleInstanceTypeItemProvider == null) {
			deployedModuleInstanceTypeItemProvider = new DeployedModuleInstanceTypeItemProvider(this);
		}

		return deployedModuleInstanceTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link technology.ecoa.deployment._2.DeployedTriggerInstanceType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeployedTriggerInstanceTypeItemProvider deployedTriggerInstanceTypeItemProvider;

	/**
	 * This creates an adapter for a {@link technology.ecoa.deployment._2.DeployedTriggerInstanceType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeployedTriggerInstanceTypeAdapter() {
		if (deployedTriggerInstanceTypeItemProvider == null) {
			deployedTriggerInstanceTypeItemProvider = new DeployedTriggerInstanceTypeItemProvider(this);
		}

		return deployedTriggerInstanceTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link technology.ecoa.deployment._2.Deployment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeploymentItemProvider deploymentItemProvider;

	/**
	 * This creates an adapter for a {@link technology.ecoa.deployment._2.Deployment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeploymentAdapter() {
		if (deploymentItemProvider == null) {
			deploymentItemProvider = new DeploymentItemProvider(this);
		}

		return deploymentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link technology.ecoa.deployment._2.DocumentRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DocumentRootItemProvider documentRootItemProvider;

	/**
	 * This creates an adapter for a {@link technology.ecoa.deployment._2.DocumentRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDocumentRootAdapter() {
		if (documentRootItemProvider == null) {
			documentRootItemProvider = new DocumentRootItemProvider(this);
		}

		return documentRootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link technology.ecoa.deployment._2.ExecuteOnType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExecuteOnTypeItemProvider executeOnTypeItemProvider;

	/**
	 * This creates an adapter for a {@link technology.ecoa.deployment._2.ExecuteOnType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExecuteOnTypeAdapter() {
		if (executeOnTypeItemProvider == null) {
			executeOnTypeItemProvider = new ExecuteOnTypeItemProvider(this);
		}

		return executeOnTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link technology.ecoa.deployment._2.LogPolicy} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogPolicyItemProvider logPolicyItemProvider;

	/**
	 * This creates an adapter for a {@link technology.ecoa.deployment._2.LogPolicy}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogPolicyAdapter() {
		if (logPolicyItemProvider == null) {
			logPolicyItemProvider = new LogPolicyItemProvider(this);
		}

		return logPolicyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link technology.ecoa.deployment._2.ModuleLog} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModuleLogItemProvider moduleLogItemProvider;

	/**
	 * This creates an adapter for a {@link technology.ecoa.deployment._2.ModuleLog}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModuleLogAdapter() {
		if (moduleLogItemProvider == null) {
			moduleLogItemProvider = new ModuleLogItemProvider(this);
		}

		return moduleLogItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link technology.ecoa.deployment._2.PlatformConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlatformConfigurationItemProvider platformConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link technology.ecoa.deployment._2.PlatformConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlatformConfigurationAdapter() {
		if (platformConfigurationItemProvider == null) {
			platformConfigurationItemProvider = new PlatformConfigurationItemProvider(this);
		}

		return platformConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link technology.ecoa.deployment._2.PlatformMessages} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlatformMessagesItemProvider platformMessagesItemProvider;

	/**
	 * This creates an adapter for a {@link technology.ecoa.deployment._2.PlatformMessages}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlatformMessagesAdapter() {
		if (platformMessagesItemProvider == null) {
			platformMessagesItemProvider = new PlatformMessagesItemProvider(this);
		}

		return platformMessagesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link technology.ecoa.deployment._2.ProtectionDomain} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProtectionDomainItemProvider protectionDomainItemProvider;

	/**
	 * This creates an adapter for a {@link technology.ecoa.deployment._2.ProtectionDomain}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProtectionDomainAdapter() {
		if (protectionDomainItemProvider == null) {
			protectionDomainItemProvider = new ProtectionDomainItemProvider(this);
		}

		return protectionDomainItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link technology.ecoa.deployment._2.UseType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UseTypeItemProvider useTypeItemProvider;

	/**
	 * This creates an adapter for a {@link technology.ecoa.deployment._2.UseType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUseTypeAdapter() {
		if (useTypeItemProvider == null) {
			useTypeItemProvider = new UseTypeItemProvider(this);
		}

		return useTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link technology.ecoa.deployment._2.WireMapping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WireMappingItemProvider wireMappingItemProvider;

	/**
	 * This creates an adapter for a {@link technology.ecoa.deployment._2.WireMapping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWireMappingAdapter() {
		if (wireMappingItemProvider == null) {
			wireMappingItemProvider = new WireMappingItemProvider(this);
		}

		return wireMappingItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (componentLogItemProvider != null) componentLogItemProvider.dispose();
		if (computingNodeConfigurationItemProvider != null) computingNodeConfigurationItemProvider.dispose();
		if (deployedModuleInstanceTypeItemProvider != null) deployedModuleInstanceTypeItemProvider.dispose();
		if (deployedTriggerInstanceTypeItemProvider != null) deployedTriggerInstanceTypeItemProvider.dispose();
		if (deploymentItemProvider != null) deploymentItemProvider.dispose();
		if (documentRootItemProvider != null) documentRootItemProvider.dispose();
		if (executeOnTypeItemProvider != null) executeOnTypeItemProvider.dispose();
		if (logPolicyItemProvider != null) logPolicyItemProvider.dispose();
		if (moduleLogItemProvider != null) moduleLogItemProvider.dispose();
		if (platformConfigurationItemProvider != null) platformConfigurationItemProvider.dispose();
		if (platformMessagesItemProvider != null) platformMessagesItemProvider.dispose();
		if (protectionDomainItemProvider != null) protectionDomainItemProvider.dispose();
		if (useTypeItemProvider != null) useTypeItemProvider.dispose();
		if (wireMappingItemProvider != null) wireMappingItemProvider.dispose();
	}

}
