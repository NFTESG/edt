/**
 * Copyright (c) 2023 Dassault Aviation
 *
 * SPDX-License-Identifier: MIT
 *
 */

package technology.ecoa.logicalsystem._2.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import technology.ecoa.logicalsystem._2.util.logAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class logItemProviderAdapterFactory extends logAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public logItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link technology.ecoa.logicalsystem._2.AvailableMemoryType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AvailableMemoryTypeItemProvider availableMemoryTypeItemProvider;

	/**
	 * This creates an adapter for a {@link technology.ecoa.logicalsystem._2.AvailableMemoryType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAvailableMemoryTypeAdapter() {
		if (availableMemoryTypeItemProvider == null) {
			availableMemoryTypeItemProvider = new AvailableMemoryTypeItemProvider(this);
		}

		return availableMemoryTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link technology.ecoa.logicalsystem._2.DocumentRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DocumentRootItemProvider documentRootItemProvider;

	/**
	 * This creates an adapter for a {@link technology.ecoa.logicalsystem._2.DocumentRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDocumentRootAdapter() {
		if (documentRootItemProvider == null) {
			documentRootItemProvider = new DocumentRootItemProvider(this);
		}

		return documentRootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link technology.ecoa.logicalsystem._2.EndianessType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EndianessTypeItemProvider endianessTypeItemProvider;

	/**
	 * This creates an adapter for a {@link technology.ecoa.logicalsystem._2.EndianessType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEndianessTypeAdapter() {
		if (endianessTypeItemProvider == null) {
			endianessTypeItemProvider = new EndianessTypeItemProvider(this);
		}

		return endianessTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link technology.ecoa.logicalsystem._2.LatencyType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LatencyTypeItemProvider latencyTypeItemProvider;

	/**
	 * This creates an adapter for a {@link technology.ecoa.logicalsystem._2.LatencyType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLatencyTypeAdapter() {
		if (latencyTypeItemProvider == null) {
			latencyTypeItemProvider = new LatencyTypeItemProvider(this);
		}

		return latencyTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link technology.ecoa.logicalsystem._2.LatencyType1} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LatencyType1ItemProvider latencyType1ItemProvider;

	/**
	 * This creates an adapter for a {@link technology.ecoa.logicalsystem._2.LatencyType1}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLatencyType1Adapter() {
		if (latencyType1ItemProvider == null) {
			latencyType1ItemProvider = new LatencyType1ItemProvider(this);
		}

		return latencyType1ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link technology.ecoa.logicalsystem._2.LinkType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkTypeItemProvider linkTypeItemProvider;

	/**
	 * This creates an adapter for a {@link technology.ecoa.logicalsystem._2.LinkType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkTypeAdapter() {
		if (linkTypeItemProvider == null) {
			linkTypeItemProvider = new LinkTypeItemProvider(this);
		}

		return linkTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link technology.ecoa.logicalsystem._2.LinkType1} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkType1ItemProvider linkType1ItemProvider;

	/**
	 * This creates an adapter for a {@link technology.ecoa.logicalsystem._2.LinkType1}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkType1Adapter() {
		if (linkType1ItemProvider == null) {
			linkType1ItemProvider = new LinkType1ItemProvider(this);
		}

		return linkType1ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link technology.ecoa.logicalsystem._2.LogicalComputingNodeLinks} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogicalComputingNodeLinksItemProvider logicalComputingNodeLinksItemProvider;

	/**
	 * This creates an adapter for a {@link technology.ecoa.logicalsystem._2.LogicalComputingNodeLinks}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogicalComputingNodeLinksAdapter() {
		if (logicalComputingNodeLinksItemProvider == null) {
			logicalComputingNodeLinksItemProvider = new LogicalComputingNodeLinksItemProvider(this);
		}

		return logicalComputingNodeLinksItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link technology.ecoa.logicalsystem._2.LogicalComputingNodeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogicalComputingNodeTypeItemProvider logicalComputingNodeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link technology.ecoa.logicalsystem._2.LogicalComputingNodeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogicalComputingNodeTypeAdapter() {
		if (logicalComputingNodeTypeItemProvider == null) {
			logicalComputingNodeTypeItemProvider = new LogicalComputingNodeTypeItemProvider(this);
		}

		return logicalComputingNodeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link technology.ecoa.logicalsystem._2.LogicalComputingPlatform} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogicalComputingPlatformItemProvider logicalComputingPlatformItemProvider;

	/**
	 * This creates an adapter for a {@link technology.ecoa.logicalsystem._2.LogicalComputingPlatform}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogicalComputingPlatformAdapter() {
		if (logicalComputingPlatformItemProvider == null) {
			logicalComputingPlatformItemProvider = new LogicalComputingPlatformItemProvider(this);
		}

		return logicalComputingPlatformItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link technology.ecoa.logicalsystem._2.LogicalComputingPlatformLinks} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogicalComputingPlatformLinksItemProvider logicalComputingPlatformLinksItemProvider;

	/**
	 * This creates an adapter for a {@link technology.ecoa.logicalsystem._2.LogicalComputingPlatformLinks}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogicalComputingPlatformLinksAdapter() {
		if (logicalComputingPlatformLinksItemProvider == null) {
			logicalComputingPlatformLinksItemProvider = new LogicalComputingPlatformLinksItemProvider(this);
		}

		return logicalComputingPlatformLinksItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link technology.ecoa.logicalsystem._2.LogicalProcessorsType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogicalProcessorsTypeItemProvider logicalProcessorsTypeItemProvider;

	/**
	 * This creates an adapter for a {@link technology.ecoa.logicalsystem._2.LogicalProcessorsType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogicalProcessorsTypeAdapter() {
		if (logicalProcessorsTypeItemProvider == null) {
			logicalProcessorsTypeItemProvider = new LogicalProcessorsTypeItemProvider(this);
		}

		return logicalProcessorsTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link technology.ecoa.logicalsystem._2.LogicalSystem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogicalSystemItemProvider logicalSystemItemProvider;

	/**
	 * This creates an adapter for a {@link technology.ecoa.logicalsystem._2.LogicalSystem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogicalSystemAdapter() {
		if (logicalSystemItemProvider == null) {
			logicalSystemItemProvider = new LogicalSystemItemProvider(this);
		}

		return logicalSystemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link technology.ecoa.logicalsystem._2.ModuleSwitchTimeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModuleSwitchTimeTypeItemProvider moduleSwitchTimeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link technology.ecoa.logicalsystem._2.ModuleSwitchTimeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModuleSwitchTimeTypeAdapter() {
		if (moduleSwitchTimeTypeItemProvider == null) {
			moduleSwitchTimeTypeItemProvider = new ModuleSwitchTimeTypeItemProvider(this);
		}

		return moduleSwitchTimeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link technology.ecoa.logicalsystem._2.OsType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OsTypeItemProvider osTypeItemProvider;

	/**
	 * This creates an adapter for a {@link technology.ecoa.logicalsystem._2.OsType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOsTypeAdapter() {
		if (osTypeItemProvider == null) {
			osTypeItemProvider = new OsTypeItemProvider(this);
		}

		return osTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link technology.ecoa.logicalsystem._2.StepDurationType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StepDurationTypeItemProvider stepDurationTypeItemProvider;

	/**
	 * This creates an adapter for a {@link technology.ecoa.logicalsystem._2.StepDurationType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStepDurationTypeAdapter() {
		if (stepDurationTypeItemProvider == null) {
			stepDurationTypeItemProvider = new StepDurationTypeItemProvider(this);
		}

		return stepDurationTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link technology.ecoa.logicalsystem._2.ThroughputType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ThroughputTypeItemProvider throughputTypeItemProvider;

	/**
	 * This creates an adapter for a {@link technology.ecoa.logicalsystem._2.ThroughputType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createThroughputTypeAdapter() {
		if (throughputTypeItemProvider == null) {
			throughputTypeItemProvider = new ThroughputTypeItemProvider(this);
		}

		return throughputTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link technology.ecoa.logicalsystem._2.ThroughputType1} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ThroughputType1ItemProvider throughputType1ItemProvider;

	/**
	 * This creates an adapter for a {@link technology.ecoa.logicalsystem._2.ThroughputType1}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createThroughputType1Adapter() {
		if (throughputType1ItemProvider == null) {
			throughputType1ItemProvider = new ThroughputType1ItemProvider(this);
		}

		return throughputType1ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link technology.ecoa.logicalsystem._2.TransportBindingType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransportBindingTypeItemProvider transportBindingTypeItemProvider;

	/**
	 * This creates an adapter for a {@link technology.ecoa.logicalsystem._2.TransportBindingType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransportBindingTypeAdapter() {
		if (transportBindingTypeItemProvider == null) {
			transportBindingTypeItemProvider = new TransportBindingTypeItemProvider(this);
		}

		return transportBindingTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link technology.ecoa.logicalsystem._2.UseType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UseTypeItemProvider useTypeItemProvider;

	/**
	 * This creates an adapter for a {@link technology.ecoa.logicalsystem._2.UseType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUseTypeAdapter() {
		if (useTypeItemProvider == null) {
			useTypeItemProvider = new UseTypeItemProvider(this);
		}

		return useTypeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (availableMemoryTypeItemProvider != null) availableMemoryTypeItemProvider.dispose();
		if (documentRootItemProvider != null) documentRootItemProvider.dispose();
		if (endianessTypeItemProvider != null) endianessTypeItemProvider.dispose();
		if (latencyTypeItemProvider != null) latencyTypeItemProvider.dispose();
		if (latencyType1ItemProvider != null) latencyType1ItemProvider.dispose();
		if (linkTypeItemProvider != null) linkTypeItemProvider.dispose();
		if (linkType1ItemProvider != null) linkType1ItemProvider.dispose();
		if (logicalComputingNodeLinksItemProvider != null) logicalComputingNodeLinksItemProvider.dispose();
		if (logicalComputingNodeTypeItemProvider != null) logicalComputingNodeTypeItemProvider.dispose();
		if (logicalComputingPlatformItemProvider != null) logicalComputingPlatformItemProvider.dispose();
		if (logicalComputingPlatformLinksItemProvider != null) logicalComputingPlatformLinksItemProvider.dispose();
		if (logicalProcessorsTypeItemProvider != null) logicalProcessorsTypeItemProvider.dispose();
		if (logicalSystemItemProvider != null) logicalSystemItemProvider.dispose();
		if (moduleSwitchTimeTypeItemProvider != null) moduleSwitchTimeTypeItemProvider.dispose();
		if (osTypeItemProvider != null) osTypeItemProvider.dispose();
		if (stepDurationTypeItemProvider != null) stepDurationTypeItemProvider.dispose();
		if (throughputTypeItemProvider != null) throughputTypeItemProvider.dispose();
		if (throughputType1ItemProvider != null) throughputType1ItemProvider.dispose();
		if (transportBindingTypeItemProvider != null) transportBindingTypeItemProvider.dispose();
		if (useTypeItemProvider != null) useTypeItemProvider.dispose();
	}

}
