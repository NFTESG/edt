/**
 *
 * $Id$
 */
package technology.ecoa.implementation._2.validation;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.util.FeatureMap;

import technology.ecoa.implementation._2.DataReadType;
import technology.ecoa.implementation._2.DataWrittenType;
import technology.ecoa.implementation._2.Event;
import technology.ecoa.implementation._2.EventReceivedType;
import technology.ecoa.implementation._2.RequestReceivedType;
import technology.ecoa.implementation._2.RequestSentType;

/**
 * A sample validator interface for {@link technology.ecoa.implementation._2.OperationsType}.
 * This doesn't really do anything, and it's not a real EMF artifact.
 * It was generated by the org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's code generator can be extended.
 * This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.
 */
public interface OperationsTypeValidator {
	boolean validate();

	boolean validateGroup(FeatureMap value);
	boolean validateDataWritten(EList<DataWrittenType> value);
	boolean validateDataRead(EList<DataReadType> value);
	boolean validateEventSent(EList<Event> value);
	boolean validateEventReceived(EList<EventReceivedType> value);
	boolean validateRequestSent(EList<RequestSentType> value);
	boolean validateRequestReceived(EList<RequestReceivedType> value);
}
