/**
 *
 * $Id$
 */
package technology.ecoa.types._2.validation;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.util.FeatureMap;

import technology.ecoa.types._2.Array;
import technology.ecoa.types._2.Constant;
import technology.ecoa.types._2.FixedArray;
import technology.ecoa.types._2.Simple;
import technology.ecoa.types._2.VariantRecord;

/**
 * A sample validator interface for {@link technology.ecoa.types._2.DataTypes}.
 * This doesn't really do anything, and it's not a real EMF artifact.
 * It was generated by the org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's code generator can be extended.
 * This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.
 */
public interface DataTypesValidator {
	boolean validate();

	boolean validateGroup(FeatureMap value);
	boolean validateSimple(EList<Simple> value);
	boolean validateRecord(EList<technology.ecoa.types._2.Record> value);
	boolean validateConstant(EList<Constant> value);
	boolean validateVariantRecord(EList<VariantRecord> value);
	boolean validateArray(EList<Array> value);
	boolean validateFixedArray(EList<FixedArray> value);
	boolean validateEnum(EList<technology.ecoa.types._2.Enum> value);
}
