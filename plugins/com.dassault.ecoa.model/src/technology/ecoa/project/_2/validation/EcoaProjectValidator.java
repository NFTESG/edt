/**
 *
 * $Id$
 */
package technology.ecoa.project._2.validation;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.util.FeatureMap;

import technology.ecoa.project._2.ELIEUIDs;
import technology.ecoa.project._2.Files;

/**
 * A sample validator interface for {@link technology.ecoa.project._2.EcoaProject}.
 * This doesn't really do anything, and it's not a real EMF artifact.
 * It was generated by the org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's code generator can be extended.
 * This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.
 */
public interface EcoaProjectValidator {
	boolean validate();

	boolean validateGroup(FeatureMap value);
	boolean validateServiceDefinitions(EList<Files> value);
	boolean validateComponentDefinitions(EList<Files> value);
	boolean validateTypes(EList<Files> value);
	boolean validateInitialAssembly(EList<String> value);
	boolean validateComponentImplementations(EList<Files> value);
	boolean validateLogicalSystem(EList<String> value);
	boolean validateCrossPlatformsView(EList<String> value);
	boolean validateDeploymentSchema(EList<String> value);
	boolean validateOutputDirectory(EList<String> value);
	boolean validateImplementationAssembly(EList<String> value);
	boolean validateEUIDs(EList<ELIEUIDs> value);
	boolean validateName(String value);
}
