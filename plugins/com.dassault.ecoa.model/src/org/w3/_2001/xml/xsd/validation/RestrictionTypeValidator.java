/**
 *
 * $Id$
 */
package org.w3._2001.xml.xsd.validation;

import javax.xml.namespace.QName;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.util.FeatureMap;

import org.w3._2001.xml.xsd.All;
import org.w3._2001.xml.xsd.Attribute;
import org.w3._2001.xml.xsd.AttributeGroupRef;
import org.w3._2001.xml.xsd.ExplicitGroup;
import org.w3._2001.xml.xsd.Facet;
import org.w3._2001.xml.xsd.GroupRef;
import org.w3._2001.xml.xsd.LocalSimpleType;
import org.w3._2001.xml.xsd.NoFixedFacet;
import org.w3._2001.xml.xsd.NumFacet;
import org.w3._2001.xml.xsd.PatternType;
import org.w3._2001.xml.xsd.TotalDigitsType;
import org.w3._2001.xml.xsd.WhiteSpaceType;
import org.w3._2001.xml.xsd.Wildcard;

/**
 * A sample validator interface for {@link org.w3._2001.xml.xsd.RestrictionType}.
 * This doesn't really do anything, and it's not a real EMF artifact.
 * It was generated by the org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's code generator can be extended.
 * This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.
 */
public interface RestrictionTypeValidator {
	boolean validate();

	boolean validateGroup(GroupRef value);
	boolean validateAll(All value);
	boolean validateChoice(ExplicitGroup value);
	boolean validateSequence(ExplicitGroup value);
	boolean validateSimpleType(LocalSimpleType value);
	boolean validateFacets(FeatureMap value);
	boolean validateMinExclusive(EList<Facet> value);
	boolean validateMinInclusive(EList<Facet> value);
	boolean validateMaxExclusive(EList<Facet> value);
	boolean validateMaxInclusive(EList<Facet> value);
	boolean validateTotalDigits(EList<TotalDigitsType> value);
	boolean validateFractionDigits(EList<NumFacet> value);
	boolean validateLength(EList<NumFacet> value);
	boolean validateMinLength(EList<NumFacet> value);
	boolean validateMaxLength(EList<NumFacet> value);
	boolean validateEnumeration(EList<NoFixedFacet> value);
	boolean validateWhiteSpace(EList<WhiteSpaceType> value);
	boolean validatePattern(EList<PatternType> value);
	boolean validateGroup1(FeatureMap value);
	boolean validateAttribute(EList<Attribute> value);
	boolean validateAttributeGroup(EList<AttributeGroupRef> value);
	boolean validateAnyAttribute1(Wildcard value);
	boolean validateBase(QName value);
}
