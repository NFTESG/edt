/**
 *
 * $Id$
 */
package org.open.oasis.docs.ns.opencsa.sca.sca.validation;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.util.FeatureMap;

import org.open.oasis.docs.ns.opencsa.sca.sca.Component;
import org.open.oasis.docs.ns.opencsa.sca.sca.Property;
import org.open.oasis.docs.ns.opencsa.sca.sca.Reference;
import org.open.oasis.docs.ns.opencsa.sca.sca.Service;
import org.open.oasis.docs.ns.opencsa.sca.sca.Wire;

/**
 * A sample validator interface for {@link org.open.oasis.docs.ns.opencsa.sca.sca.Composite}.
 * This doesn't really do anything, and it's not a real EMF artifact.
 * It was generated by the org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's code generator can be extended.
 * This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.
 */
public interface CompositeValidator {
	boolean validate();

	boolean validateGroup(FeatureMap value);
	boolean validateService(EList<Service> value);
	boolean validateProperty(EList<Property> value);
	boolean validateComponent(EList<Component> value);
	boolean validateReference(EList<Reference> value);
	boolean validateWire(EList<Wire> value);
	boolean validateName(String value);
	boolean validateTargetNamespace(String value);
}
